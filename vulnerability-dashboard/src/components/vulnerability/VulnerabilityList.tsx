import { memo } from 'react';
import { List } from 'react-virtualized';
import { Button } from '@mui/material';
import { Vulnerability } from '../../types/vulnerability';

interface VulnerabilityListProps {
  data: Vulnerability[];
  isLoading: boolean;
  onSelect?: (vulnerability: Vulnerability) => void;
}

const VulnerabilityRow = memo(
  ({ vulnerability, onClick }: {
    vulnerability: Vulnerability;
    onClick?: (v: Vulnerability) => void;
  }) => {
    return (
      <div
        style={{ padding: '8px', borderBottom: '1px solid #eee', cursor: 'pointer' }}
        onClick={() => onClick?.(vulnerability)}
      >
        <strong>{vulnerability.cveId}</strong> - {vulnerability.severity} (Risk: {vulnerability.riskScore})
      </div>
    );
  }
);

function exportToCSV(data: Vulnerability[]) {
  const headers = ['cveId', 'severity', 'riskScore'];
  const csv = [
    headers.join(','),
    ...data.map(v => headers.map(h => v[h as keyof Vulnerability] ?? '').join(','))
  ].join('\n');

  const blob = new Blob([csv], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'vulnerabilities.csv';
  a.click();
  window.URL.revokeObjectURL(url);
}

export function VulnerabilityList({
  data,
  isLoading,
  onSelect
}: VulnerabilityListProps) {
  if (isLoading) {
    return <div>Loading vulnerabilities...</div>;
  }

  const filtered = data.filter(Boolean);

  if (!filtered.length) {
    return <div>No vulnerabilities found.</div>;
  }

  const rowRenderer = ({ index, key, style }: any) => {
    const vuln = filtered[index];

    return (
      <div key={key} style={style}>
        <VulnerabilityRow
          vulnerability={vuln}
          onClick={onSelect}
        />
      </div>
    );
  };

  return (
    <div>
      <Button
        onClick={() => exportToCSV(filtered)}
        variant="outlined"
        size="small"
        sx={{ mb: 1 }}
      >
        Export CSV
      </Button>
      <List
        width={1000}
        height={400}
        rowCount={filtered.length}
        rowHeight={50}
        rowRenderer={rowRenderer}
      />
    </div>
  );
}
