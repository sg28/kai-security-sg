import { memo } from 'react';
import {List} from 'react-virtualized';
import { Vulnerability } from '../../types/vulnerability';

interface VulnerabilityListProps {
  data: Vulnerability[];
  isLoading: boolean;
  onSelect?: (vulnerability: Vulnerability) => void;
}

const VulnerabilityRow = memo(({ vulnerability, onClick }: { vulnerability: Vulnerability; onClick?: (v: Vulnerability) => void }) => (
  <div
    style={{ padding: '8px', borderBottom: '1px solid #eee', cursor: 'pointer' }}
    onClick={() => onClick?.(vulnerability)}
  >
    <strong>{vulnerability.cveId}</strong> - {vulnerability.severity} (Risk: {vulnerability.riskScore})
  </div>
));


export function VulnerabilityList({ data, isLoading, onSelect }: VulnerabilityListProps) {
  if (isLoading) {
    return <div>Loading vulnerabilities...</div>;
  }

  if (!data.length) {
    return <div>No vulnerabilities found.</div>;
  }

  const rowRenderer = ({ index, key, style }: any) => (
    <div key={key} style={style}>
      <VulnerabilityRow vulnerability={data[index]} onClick={onSelect} />

    </div>
  );

  return (
    <List
      width={1000}
      height={400}
      rowCount={data.length}
      rowHeight={50}
      rowRenderer={rowRenderer}
    />
  );
}