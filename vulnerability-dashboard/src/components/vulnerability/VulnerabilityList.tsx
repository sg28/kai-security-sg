// src/components/vulnerability/VulnerabilityList.tsx
import { memo, useEffect } from 'react';
import { AutoSizer, List } from 'react-virtualized';
import { Button, Typography, Box, Chip, Paper, Divider } from '@mui/material';
import { PieChart, Pie, Cell, Legend, Tooltip } from 'recharts';
import { Vulnerability } from '../../types/vulnerability';

interface VulnerabilityListProps {
  data: Vulnerability[];
  isLoading: boolean;
  onSelect?: (vulnerability: Vulnerability) => void;
}

const VulnerabilityRow = memo(
  ({ vulnerability, onClick }: {
    vulnerability: Vulnerability;
    onClick?: (v: Vulnerability) => void;
  }) => {
    const isCritical = vulnerability.severity === 'CRITICAL';

    return (
      <div
        style={{
          padding: '12px 20px',
          borderBottom: '1px solid #e0e0e0',
          cursor: 'pointer',
          backgroundColor: isCritical ? '#fdecea' : '#fff',
          fontWeight: isCritical ? 600 : 400,
          color: isCritical ? '#b71c1c' : '#333',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          borderRadius: 4,
        }}
        onClick={() => onClick?.(vulnerability)}
      >
        <span>
          <strong>{vulnerability.cveId}</strong> - {vulnerability.severity} (Risk: {vulnerability.riskScore})
        </span>
        {isCritical && <Chip label="CRITICAL" size="small" color="error" />}
      </div>
    );
  }
);

function exportToCSV(data: Vulnerability[]) {
  const headers = ['cveId', 'severity', 'riskScore'];
  const csv = [
    headers.join(','),
    ...data.map(v => headers.map(h => v[h as keyof Vulnerability] ?? '').join(','))
  ].join('\n');

  const blob = new Blob([csv], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'vulnerabilities.csv';
  a.click();
  window.URL.revokeObjectURL(url);
}

function saveUserPreference(key: string, value: any) {
  localStorage.setItem(`vuln-pref-${key}`, JSON.stringify(value));
}

function getUserPreference<T>(key: string, fallback: T): T {
  try {
    const item = localStorage.getItem(`vuln-pref-${key}`);
    return item ? JSON.parse(item) : fallback;
  } catch {
    return fallback;
  }
}

export function VulnerabilityList({
  data,
  isLoading,
  onSelect
}: VulnerabilityListProps) {
  useEffect(() => {
    saveUserPreference('lastVulnerabilityCount', data.length);
  }, [data.length]);

  if (isLoading) {
    return <div>Loading vulnerabilities...</div>;
  }

  const filtered = data.filter(Boolean);

  if (!filtered.length) {
    return <div>No vulnerabilities found.</div>;
  }

  const lastViewedCount = getUserPreference<number>('lastVulnerabilityCount', 0);

  const rowRenderer = ({ index, key, style }: any) => {
    const vuln = filtered[index];

    return (
      <div key={key} style={style} role="gridcell">
        <VulnerabilityRow
          vulnerability={vuln}
          onClick={onSelect}
        />
      </div>
    );
  };

  const aiManualData = [
    {
      name: 'AI-flagged (ai-invalid-norisk)',
      value: filtered.filter(v => v.kaiStatus === 'ai-invalid-norisk').length
    },
    {
      name: 'Manually flagged (invalid - norisk)',
      value: filtered.filter(v => v.kaiStatus === 'invalid - norisk').length
    }
  ];

  const COLORS = ['#7c4dff', '#00bfa5'];

  return (
    <Box sx={{ py: 2, px: 3, display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3 }}>
      <Paper sx={{ p: 2, flex: '1 1 30%', minWidth: 280 }} elevation={3}>
        <Button
          onClick={() => exportToCSV(filtered)}
          variant="outlined"
          size="small"
          fullWidth
          sx={{ mb: 2 }}
        >
          Export CSV
        </Button>
        <Typography variant="caption" sx={{ mb: 1, display: 'block', color: 'text.secondary' }}>
          Last viewed vulnerabilities: {lastViewedCount}
        </Typography>
        <Divider sx={{ my: 1 }} />
        <Typography variant="subtitle2" sx={{ mb: 1 }}>AI vs Manual Analysis</Typography>
        <PieChart width={260} height={200}>
          <Pie
            data={aiManualData}
            cx={130}
            cy={100}
            labelLine={false}
            outerRadius={60}
            dataKey="value"
          >
            {aiManualData.map((_, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
            ))}
          </Pie>
          <Tooltip />
          <Legend verticalAlign="bottom" height={36} />
        </PieChart>
      </Paper>

      <Box sx={{ flex: '1 1 70%' }}>
        <Box sx={{ mb: 2 }}>
          <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
            Highlighting Top Critical Vulnerabilities
          </Typography>
          <Typography variant="caption" color="text.secondary">
            Entries with severity "CRITICAL" are emphasized below
          </Typography>
        </Box>

        <Paper variant="outlined">
          <AutoSizer disableHeight>
            {({ width }) => (
              <List
                width={width}
                height={800}
                rowCount={filtered.length}
                rowHeight={50}
                rowRenderer={rowRenderer}
              />
            )}
          </AutoSizer>
        </Paper>
      </Box>
    </Box>
  );
}
