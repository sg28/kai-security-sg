// src/components/dashboard/FilterPanel.tsx
import {
  Autocomplete,
  TextField,
  Checkbox,
  FormControlLabel,
  FormGroup,
  Typography,
} from "@mui/material";
import { useMemo, useState } from "react";
import { FilterOptions, Vulnerability } from "../../types/vulnerability";

interface FilterPanelProps {
  filters: FilterOptions;
  onFilterChange: (filters: FilterOptions) => void;
  allVulnerabilities?: Vulnerability[]; // optional for suggestions
}

export function FilterPanel({
  filters,
  onFilterChange,
  allVulnerabilities = [],
}: FilterPanelProps) {
  const [packageName, setPackageName] = useState(filters.packageName || "");
  const [searchQuery, setSearchQuery] = useState(filters.packageName || "");

  const severityOptions = ["CRITICAL", "HIGH", "MEDIUM", "LOW"];

  const suggestions = useMemo(() => {
    const q = searchQuery.toLowerCase();
    if (!q) return [];
    return allVulnerabilities
      .filter(
        (v) =>
          (v.cveId && v.cveId.toLowerCase().includes(q)) ||
          (v.packageName && v.packageName.toLowerCase().includes(q))
      )
      .map((v) => `${v.cveId || "N/A"} - ${v.packageName || "N/A"}`)
      .slice(0, 5);
  }, [searchQuery, allVulnerabilities]);

  const handlePackageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newVal = e.target.value;
    setPackageName(newVal);
    onFilterChange({ ...filters, packageName: newVal });
  };

  const handleSeverityChange = (_: any, value: string[]) => {
    onFilterChange({ ...filters, severity: value });
  };

  const handleRiskScoreChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const val = Number(e.target.value);
    onFilterChange({ ...filters, minRiskScore: isNaN(val) ? undefined : val });
  };

  const handleSearchQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const val = e.target.value;
    setSearchQuery(val);
    onFilterChange({ ...filters, packageName: val });
  };

  return (
    <div>
      <TextField
        label="Search CVE ID or Package"
        value={searchQuery}
        onChange={handleSearchQueryChange}
        fullWidth
        margin="normal"
      />

      {suggestions.length > 0 && (
        <div style={{ padding: "8px 0" }}>
          <Typography variant="caption">Suggestions:</Typography>
          <ul style={{ paddingLeft: 16 }}>
            {suggestions.map((s, i) => (
              <li key={i}>{s}</li>
            ))}
          </ul>
        </div>
      )}

      <TextField
        label="Filter by Package Name"
        value={packageName}
        onChange={handlePackageChange}
        fullWidth
        margin="normal"
      />

      <Autocomplete
        multiple
        options={severityOptions}
        value={filters.severity || []}
        onChange={handleSeverityChange}
        renderInput={(params) => (
          <TextField {...params} label="Severity" margin="normal" />
        )}
      />

      <TextField
        label="Minimum Risk Score"
        type="number"
        value={filters.minRiskScore ?? ""}
        onChange={handleRiskScoreChange}
        fullWidth
        margin="normal"
      />
    </div>
  );
}
