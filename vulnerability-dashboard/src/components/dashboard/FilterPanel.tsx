// src/components/dashboard/FilterPanel.tsx
import {
  Autocomplete,
  TextField,
  Chip,
  Box,
  Checkbox,
  FormControlLabel,
  FormGroup,
  Typography,
  Fade,
  LinearProgress,
} from '@mui/material';
import { useMemo, useState } from 'react';
import { FilterOptions, Vulnerability } from '../../types/vulnerability';

interface FilterPanelProps {
  filters: FilterOptions;
  onFilterChange: (filters: FilterOptions) => void;
  allVulnerabilities?: Vulnerability[]; // optional for suggestions
  filteredCount?: number;
}

export function FilterPanel({ filters, onFilterChange, allVulnerabilities = [], filteredCount = 0 }: FilterPanelProps) {
  const [packageName, setPackageName] = useState(filters.packageName || '');
  const [searchQuery, setSearchQuery] = useState(filters.searchQuery || '');

  const severityOptions = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'];

  const totalCount = allVulnerabilities.length;
  const filterPercentage = totalCount > 0 ? (filteredCount / totalCount) * 100 : 0;

  const suggestions = useMemo(() => {
    const q = searchQuery.toLowerCase();
    if (!q) return [];
    return allVulnerabilities
      .filter(v =>
        (v.cve && v.cve.toLowerCase().includes(q)) ||
        (v.packageName && v.packageName.toLowerCase().includes(q))
      )
      .map(v => `${v.cve || 'N/A'} - ${v.packageName || 'N/A'}`)
      .slice(0, 5);
  }, [searchQuery, allVulnerabilities]);
  

  const handleSearchQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const val = e.target.value;
    setSearchQuery(val);
    onFilterChange({ ...filters, searchQuery: val });
  };

  const handlePackageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newVal = e.target.value;
    setPackageName(newVal);
    onFilterChange({ ...filters, packageName: newVal });
  };

  const handleSeverityChange = (_: any, value: string[]) => {
    onFilterChange({
      ...filters,
      severity: value.length > 0 ? value : undefined
    });
  };
  

  const handleRiskScoreChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const val = Number(e.target.value);
    onFilterChange({ ...filters, minRiskScore: isNaN(val) ? undefined : val });
  };

  const handleClearFilter = (key: keyof FilterOptions) => {
    const newFilters = { ...filters };
    delete newFilters[key];
    onFilterChange(newFilters);
  };
  console.log("All Vulnerabilities Sample:", allVulnerabilities.slice(0, 3));

  return (
    <div>
      <TextField
        label="Search CVE ID or Package"
        value={searchQuery}
        onChange={handleSearchQueryChange}
        fullWidth
        margin="normal"
      />
      {suggestions.length > 0 && (
        <div style={{ padding: '8px 0' }}>
          <Typography variant="caption">Suggestions:</Typography>
          <ul style={{ paddingLeft: 16 }}>
            {suggestions.map((s, i) => (
              <li key={i}>{s}</li>
            ))}
          </ul>
        </div>
      )}

      <TextField
        label="Filter by Package Name"
        value={packageName}
        onChange={handlePackageChange}
        fullWidth
        margin="normal"
      />

      <Autocomplete
        multiple
        options={severityOptions}
        value={filters.severity || []}
        onChange={handleSeverityChange}
        renderInput={(params) => <TextField {...params} label="Severity" margin="normal" />}
      />

      <TextField
        label="Minimum Risk Score"
        type="number"
        value={filters.minRiskScore ?? ''}
        onChange={handleRiskScoreChange}
        fullWidth
        margin="normal"
      />

      {/* Active Filter Chips */}
      <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
        <Fade in={!!filters.searchQuery}><span>{filters.searchQuery && <Chip label={`Search: ${filters.searchQuery}`} onDelete={() => handleClearFilter('searchQuery')} />}</span></Fade>
        <Fade in={!!filters.packageName}><span>{filters.packageName && <Chip label={`Package: ${filters.packageName}`} onDelete={() => handleClearFilter('packageName')} />}</span></Fade>
        <Fade in={!!filters.minRiskScore}><span>{filters.minRiskScore !== undefined && <Chip label={`Min Risk: ${filters.minRiskScore}`} onDelete={() => handleClearFilter('minRiskScore')} />}</span></Fade>
        {filters.severity?.map((sev, i) => (
          <Fade in key={sev + i}><Chip label={`Severity: ${sev}`} onDelete={() => {
            const updated = filters.severity!.filter(s => s !== sev);
            onFilterChange({ ...filters, severity: updated.length ? updated : undefined });
          }} /></Fade>
        ))}
      </Box>

      {/* Impact Summary */}
      <Box sx={{ mt: 3 }}>
        <Typography variant="body2">
          Showing {filteredCount} of {totalCount} vulnerabilities ({Math.round(filterPercentage)}%)
        </Typography>
        <LinearProgress variant="determinate" value={filterPercentage} sx={{ mt: 1 }} />
      </Box>
    </div>
  );
}
