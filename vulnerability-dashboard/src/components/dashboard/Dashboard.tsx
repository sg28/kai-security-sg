import { useState } from 'react';
import { Grid, Paper, GridProps, Box } from '@mui/material';
import { VulnerabilityList } from '../vulnerability/VulnerabilityList';
import { SeverityChart } from './SeverityChart';
import { FilterPanel } from './FilterPanel';
import { useVulnerabilities } from '../../hooks/useVulnerabilities';
import { filterVulnerabilities } from '../../utils/dataProcessor';
import { FilterOptions, Vulnerability } from '../../types/vulnerability';
import { CveDetailModal } from '../vulnerability/CveDetailModal';

export function Dashboard() {
  const { data: vulnerabilities = [], isLoading } = useVulnerabilities();
  const [filters, setFilters] = useState<FilterOptions>({});
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);

  const handleAnalysisFilter = () => {
    setFilters(prev => ({
      ...prev,
      kaiStatus: prev.kaiStatus?.filter(s => s !== 'invalid - norisk') || ['invalid - norisk']
    }));
  };

  const handleAIAnalysisFilter = () => {
    setFilters(prev => ({
      ...prev,
      kaiStatus: prev.kaiStatus?.filter(s => s !== 'ai-invalid-norisk') || ['ai-invalid-norisk']
    }));
  };

  const filteredData = filterVulnerabilities(vulnerabilities, filters);

  const gridItemProps = { item: true, xs: 12, md: 3, component: 'div', width:"20%" } as GridProps;
  const gridItemProps2 = { item: true, xs: 12, md: 9, component: 'div', width:"70%" } as GridProps;

  return (
    <Grid container spacing={3} sx={{ padding: '16px 24px', minHeight: '100vh' }}>
      <Grid {...gridItemProps}>
        <Paper sx={{ p: 2 }}>
          <FilterPanel
            filters={filters}
            onFilterChange={setFilters}
            allVulnerabilities={vulnerabilities}
            filteredCount={filteredData.length}
          />
        </Paper>
      </Grid>
      <Grid {...gridItemProps2}>
        <Box>
          <Paper sx={{ p: 2, mb: 3 }}>
            <SeverityChart data={filteredData} />
          </Paper>
          <Paper sx={{ p: 2 }}>
            <VulnerabilityList
              data={filteredData}
              isLoading={isLoading}
              onSelect={setSelectedVulnerability}
            />
          </Paper>
        </Box>
      </Grid>

      <CveDetailModal
        open={!!selectedVulnerability}
        onClose={() => setSelectedVulnerability(null)}
        vulnerability={selectedVulnerability}
      />
    </Grid>
  );
}
